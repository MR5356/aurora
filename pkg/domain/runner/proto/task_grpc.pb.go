// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pkg/domain/runner/proto/task.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ITask_GetInfo_FullMethodName   = "/proto.ITask/GetInfo"
	ITask_GetParams_FullMethodName = "/proto.ITask/GetParams"
	ITask_SetParams_FullMethodName = "/proto.ITask/SetParams"
	ITask_Start_FullMethodName     = "/proto.ITask/Start"
	ITask_Stop_FullMethodName      = "/proto.ITask/Stop"
	ITask_Pause_FullMethodName     = "/proto.ITask/Pause"
	ITask_Resume_FullMethodName    = "/proto.ITask/Resume"
)

// ITaskClient is the client API for ITask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ITaskClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskInfo, error)
	GetParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskParams, error)
	SetParams(ctx context.Context, in *TaskParams, opts ...grpc.CallOption) (*Empty, error)
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Resume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type iTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewITaskClient(cc grpc.ClientConnInterface) ITaskClient {
	return &iTaskClient{cc}
}

func (c *iTaskClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskInfo, error) {
	out := new(TaskInfo)
	err := c.cc.Invoke(ctx, ITask_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTaskClient) GetParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskParams, error) {
	out := new(TaskParams)
	err := c.cc.Invoke(ctx, ITask_GetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTaskClient) SetParams(ctx context.Context, in *TaskParams, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ITask_SetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTaskClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ITask_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTaskClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ITask_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTaskClient) Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ITask_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTaskClient) Resume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ITask_Resume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ITaskServer is the server API for ITask service.
// All implementations must embed UnimplementedITaskServer
// for forward compatibility
type ITaskServer interface {
	GetInfo(context.Context, *Empty) (*TaskInfo, error)
	GetParams(context.Context, *Empty) (*TaskParams, error)
	SetParams(context.Context, *TaskParams) (*Empty, error)
	Start(context.Context, *Empty) (*Empty, error)
	Stop(context.Context, *Empty) (*Empty, error)
	Pause(context.Context, *Empty) (*Empty, error)
	Resume(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedITaskServer()
}

// UnimplementedITaskServer must be embedded to have forward compatible implementations.
type UnimplementedITaskServer struct {
}

func (UnimplementedITaskServer) GetInfo(context.Context, *Empty) (*TaskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedITaskServer) GetParams(context.Context, *Empty) (*TaskParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedITaskServer) SetParams(context.Context, *TaskParams) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParams not implemented")
}
func (UnimplementedITaskServer) Start(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedITaskServer) Stop(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedITaskServer) Pause(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedITaskServer) Resume(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedITaskServer) mustEmbedUnimplementedITaskServer() {}

// UnsafeITaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ITaskServer will
// result in compilation errors.
type UnsafeITaskServer interface {
	mustEmbedUnimplementedITaskServer()
}

func RegisterITaskServer(s grpc.ServiceRegistrar, srv ITaskServer) {
	s.RegisterService(&ITask_ServiceDesc, srv)
}

func _ITask_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITask_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_GetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).GetParams(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITask_SetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).SetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_SetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).SetParams(ctx, req.(*TaskParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITask_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).Start(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITask_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITask_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).Pause(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITask_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITaskServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITask_Resume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITaskServer).Resume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ITask_ServiceDesc is the grpc.ServiceDesc for ITask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ITask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ITask",
	HandlerType: (*ITaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ITask_GetInfo_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _ITask_GetParams_Handler,
		},
		{
			MethodName: "SetParams",
			Handler:    _ITask_SetParams_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ITask_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ITask_Stop_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _ITask_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _ITask_Resume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/domain/runner/proto/task.proto",
}
